[2025-09-12T08:41:29Z INFO  cargo_ndk::cli] Using NDK at path: /opt/android/android-ndk-r27c (ANDROID_NDK_HOME)
[2025-09-12T08:41:29Z INFO  cargo_ndk::cli] NDK API level: 21
[2025-09-12T08:41:29Z INFO  cargo_ndk::cli] Building targets: arm64-v8a
[2025-09-12T08:41:29Z INFO  cargo_ndk::cli] Building arm64-v8a (aarch64-linux-android)
warning: use of deprecated function `rustls_platform_verifier::tls_config`: use the `ConfigVerifierExt` instead
   --> libs/hbb_common/src/proxy.rs:459:50
    |
459 |         let verifier = rustls_platform_verifier::tls_config();
    |                                                  ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: creating a shared reference to mutable static
  --> libs/hbb_common/src/platform/mod.rs:65:33
   |
65 |         if let Some(callback) = &GLOBAL_CALLBACK {
   |                                 ^^^^^^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `#[warn(static_mut_refs)]` on by default
help: use `&raw const` instead to create a raw pointer
   |
65 |         if let Some(callback) = &raw const GLOBAL_CALLBACK {
   |                                  +++++++++

warning: unused return value of `std::array::<impl [T; N]>::map` that must be used
    --> libs/hbb_common/src/config.rs:1576:9
     |
1576 | /         [
1577 | |             keys::OPTION_CODEC_PREFERENCE,
1578 | |             keys::OPTION_CUSTOM_FPS,
1579 | |             keys::OPTION_ZOOM_CURSOR,
...    |
1586 | |             mp.insert(key.to_owned(), UserDefaultConfig::read(key));
1587 | |         });
     | |__________^
     |
     = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
     |
1576 |         let _ = [
     |         +++++++

warning: `hbb_common` (lib) generated 3 warnings
warning: `hbb_common` (lib) generated 3 warnings (3 duplicates)
   Compiling scrap v0.5.0 (/root/rustdesk/rustdesk/libs/scrap)
error[E0425]: cannot find function, tuple struct or tuple variant `I420ToRAW` in module `super`
   --> libs/scrap/src/common/mod.rs:458:28
    |
458 |                     super::I420ToRAW(
    |                            ^^^^^^^^^ not found in `super`

error[E0425]: cannot find function, tuple struct or tuple variant `I420ToARGB` in module `super`
   --> libs/scrap/src/common/mod.rs:472:28
    |
472 |                     super::I420ToARGB(
    |                            ^^^^^^^^^^ not found in `super`

error[E0425]: cannot find function, tuple struct or tuple variant `I420ToABGR` in module `super`
   --> libs/scrap/src/common/mod.rs:486:28
    |
486 |                     super::I420ToABGR(
    |                            ^^^^^^^^^^ not found in `super`

error[E0425]: cannot find function, tuple struct or tuple variant `I444ToARGB` in module `super`
   --> libs/scrap/src/common/mod.rs:500:28
    |
500 |                     super::I444ToARGB(
    |                            ^^^^^^^^^^ not found in `super`

error[E0425]: cannot find function, tuple struct or tuple variant `I444ToABGR` in module `super`
   --> libs/scrap/src/common/mod.rs:514:28
    |
514 |                     super::I444ToABGR(
    |                            ^^^^^^^^^^ not found in `super`

warning: unexpected `cfg` condition name: `quartz`
 --> libs/scrap/src/lib.rs:1:7
  |
1 | #[cfg(quartz)]
  |       ^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(quartz)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(quartz)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `dxgi`
 --> libs/scrap/src/lib.rs:6:7
  |
6 | #[cfg(dxgi)]
  |       ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(dxgi)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(dxgi)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `quartz`
  --> libs/scrap/src/lib.rs:11:7
   |
11 | #[cfg(quartz)]
   |       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(quartz)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(quartz)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
  --> libs/scrap/src/lib.rs:14:7
   |
14 | #[cfg(x11)]
   |       ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
  --> libs/scrap/src/lib.rs:17:11
   |
17 | #[cfg(all(x11, feature = "wayland"))]
   |           ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `dxgi`
  --> libs/scrap/src/lib.rs:20:7
   |
20 | #[cfg(dxgi)]
   |       ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(dxgi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(dxgi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
   --> libs/scrap/src/common/mod.rs:270:7
    |
270 | #[cfg(x11)]
    |       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
   --> libs/scrap/src/common/mod.rs:276:7
    |
276 | #[cfg(x11)]
    |       ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
   --> libs/scrap/src/common/mod.rs:286:11
    |
286 | #[cfg(not(x11))]
    |           ^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `quartz`
  --> libs/scrap/src/common/mod.rs:11:14
   |
11 |     if #[cfg(quartz)] {
   |              ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(quartz)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(quartz)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `x11`
  --> libs/scrap/src/common/mod.rs:14:21
   |
14 |     } else if #[cfg(x11)] {
   |                     ^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(x11)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(x11)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `dxgi`
  --> libs/scrap/src/common/mod.rs:28:21
   |
28 |     } else if #[cfg(dxgi)] {
   |                     ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(dxgi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(dxgi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused imports: `File`, `OpenOptions`, `io`, and `time::Instant`
  --> libs/scrap/src/common/record.rs:12:10
   |
12 |     fs::{File, OpenOptions},
   |          ^^^^  ^^^^^^^^^^^
13 |     io,
   |     ^^
...
17 |     time::Instant,
   |     ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unreachable expression
   --> libs/scrap/src/common/record.rs:155:13
    |
155 |                self.inner = match format {
    |  ______________^            -
    | | __________________________|
156 | ||                 #[cfg(feature = "webm")]
157 | ||                 CodecFormat::VP8 | CodecFormat::VP9 | CodecFormat::AV1 => Some(Box::new(
158 | ||                     WebmRecorder::new(self.ctx.clone(), (*ctx2).clone())?,
...   ||
168 | ||                 CodecFormat::H264 | CodecFormat::H265 => bail!("unsupported codec type"),
169 | ||             };
    | ||             ^
    | ||_____________|
    |  |_____________unreachable expression
    |                any code following this `match` expression is unreachable, as all arms diverge
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `java_vm`
   --> libs/scrap/src/android/ffi.rs:216:13
    |
216 |         let java_vm = jvm.get_java_vm_pointer() as *mut c_void;
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_java_vm`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `env`
   --> libs/scrap/src/android/ffi.rs:468:15
    |
468 |     if let Ok(env) = vm.get_env() {
    |               ^^^ help: if this is intentional, prefix it with an underscore: `_env`

warning: unused variable: `ctx2`
   --> libs/scrap/src/common/record.rs:151:18
    |
151 |         let Some(ctx2) = &self.ctx2 else {
    |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_ctx2`

For more information about this error, try `rustc --explain E0425`.
warning: `scrap` (lib) generated 17 warnings
error: could not compile `scrap` (lib) due to 5 previous errors; 17 warnings emitted
[2025-09-12T08:41:32Z INFO  cargo_ndk::cli] If the build failed due to a missing target, you can run this command:
[2025-09-12T08:41:32Z INFO  cargo_ndk::cli] 
[2025-09-12T08:41:32Z INFO  cargo_ndk::cli]     rustup target install aarch64-linux-android
